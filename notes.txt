Begin React:
============

npm i -g create-react-app

create a new react app:
=======================
create-react-app client

cd client

npm start


Proxy:
======
in package.json of client(react)
add "proxy":"localhost:5000" just before the last }

this is to call the APIs without the hostname

Concurrently:
=============
This is to run the client and the server simultaneously

install concurrently

add the following in the server's package.json

  "scripts": {
    "client-install": "npm install --prefix client",
    "start": "node app.js",
    "server": "nodemon app.js",
    "client":"npm start --prefix client",
    "dev":"concurrently \"npm run server\" \"npm run client\""
  },


Run client and server concurrently:
====================================

npm run dev

Day2:
=====

class name should always start in upper case
How to use properties
how to pass properties from parent to child component
State, setState
Onchange and Submit events


Day3:
====

-Change port of react application - modify start in package.json
  "start": "set PORT=80 && react-scripts start",
-Added bootstrap
-Made the application responsive
-Added buttons to the timer - Resume, Pause, Stop
-ToDo List -> Added functionality to remove the list onClick
-diff bet onclick={} and onclick={()=>}, in the latter 'this' will be bound - https://reactjs.org/docs/handling-events.html
-This is not React-specific behavior; it is a part of how functions work in JavaScript. Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.

Day4:
=====
-Virtual dom
-Virtual DOM updates DOM only when there is a change in state
-DOM is updated based on virtual DOM
-Components contains {HTML,State,JavaScript}
-JSX Limitation: 1) Should always return only one root element 2) Shouldnt use 'class' for DOM, as class is a reserved keyword in JSX. Instead use className
-ReactDOM.render(<component>,document.getElementById('app'))
-{} - Dynamic content in JSX
-how to use react in CDN library
-Babel.js is a free and open-source JavaScript compiler and configurable transpiler used in web development
-react extention for developer tools
-Events are camel case in JSX
-onClick={this.fun} will invoke function on click.
-onClick={this.fun()} will invoke the function right away when the page loads
-function should be bound to be called on DOM events. Three diff ways to bind
  1) Explicitly bind the function in class eg: this.resumeTime = this.resumeTime.bind(this);
  2) Create the function as bound method. eg: pauseTime = () => {clearInterval(this.interval);this.disableButton(false,true,true);}
  3) Bind it in the event - eg: onClick={()=>this.resumeTime()}
-Read DOM value in function - eg: handleChange = (e)=>{this.setState({name:e.target.value })}
-This is to prevent default behavior during events - e.preventDefault
-Install create-react-app
-SPA - Single Page Apps : React apps are generally SPAs
-props can also be used like this - const {name,age,sex}=this.props; //This will get the name,age,sex properties from props

Day5:
=====
-Stateless component - TodoList is converted into a stateless component
-added ternary operator to the 'click to remove' message
-Employee List - New component with Form
-Added media query for input-group, to make it responsive
-Added default empList, Used spread operator for the hostname
-Added onClick function, which will delete the row, to the TR tag in empList
-Added the strikethrough style onhover for the empList

Day6:
=====
-Install react-router-dom to use routes in react - npm install react-router-dom
-Added a NavBar to navigate between different routes
-Added Bootstrap JS files for Navbar to be responsive
-Routes implemented
-Link,NavLink to prevent reload of the browser while the components are loaded
-NavLink when used will make the link with the current component will have css class -> active
-programmatic redirection -eg: this.props.history.push('/')
-props.history is available only for components called within <BrowserRouter></BrowserRouter> - eg:   <BrowserRouter>    <Route exact path="/" component={Timer}/></BrowserRouter>
-to get props.history for other components, one should use withRouter - eg:
-Higher Order Component - eg: withRouter
-Sample HOC has been implemented in App.js
-Life Cycle Methods 1) Constructor, componentWillMount, render, componentDidMount - First time load
                    2) componentWillReceiveProps, shouldComponentUpdate, componentWillUpdate, render, componentDidUpdate - when there's a change in the component or the parent
                    3) componentWillUnmount - When components unmounts
-https://code.likeagirl.io/understanding-react-component-life-cycle-49bf4b8674de

Day7:
=====
-Axios - npm i axios -s
-Added a new component TodoList, which uses API and calls a 3rd party API
-Route Params
-Added a new Nav Users, TodoList Renamed to Posts and the posts of users are seen on clicking the link from the users Page
-Switch Tag
-Import images

Day 8:
======
-npm i -s redux react-redux
-redux is a state management package. states of the components are private. To have a central store and allow components to access it, we use redux
-reducer, dispatch action
-Reducer is the method that updates the central createStore
-Dispatch Action is the method that calls the reducer. action cant be async.
-Component dispatches the action. Dispatch actions and props are mapped in the Components.
-Central store is added using provider in index.js
-ref, focus
